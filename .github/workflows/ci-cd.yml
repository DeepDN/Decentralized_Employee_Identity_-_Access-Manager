name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        cd ../contracts && npm ci
    
    - name: Lint code
      run: |
        npm run lint
    
    - name: Run backend tests
      run: |
        cd backend
        npm test
      env:
        NODE_ENV: test
        DYNAMODB_ENDPOINT: http://localhost:8000
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_REGION: us-east-1
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test
    
    - name: Test smart contracts
      run: |
        cd contracts
        npm run compile
        npm test
    
    - name: Build applications
      run: |
        npm run build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: |
        npm audit --audit-level high
        cd backend && npm audit --audit-level high
        cd ../frontend && npm audit --audit-level high
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.employee-identity.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Build applications
      run: npm run build
    
    - name: Deploy infrastructure
      run: |
        aws cloudformation deploy \
          --template-file infrastructure/staging.yaml \
          --stack-name employee-identity-staging \
          --parameter-overrides \
            Environment=staging \
            PolygonRpcUrl=${{ secrets.POLYGON_RPC_URL }} \
            PolygonPrivateKey=${{ secrets.POLYGON_PRIVATE_KEY }} \
            VeramoKmsSecret=${{ secrets.VERAMO_KMS_SECRET }} \
          --capabilities CAPABILITY_IAM \
          --no-fail-on-empty-changeset
    
    - name: Package Lambda functions
      run: |
        cd backend/lambda
        zip -r did-handler.zip didHandler.js node_modules/
        zip -r credential-handler.zip credentialHandler.js node_modules/
    
    - name: Update Lambda functions
      run: |
        aws lambda update-function-code \
          --function-name employee-identity-did-handler-staging \
          --zip-file fileb://backend/lambda/did-handler.zip
        
        aws lambda update-function-code \
          --function-name employee-identity-credential-handler-staging \
          --zip-file fileb://backend/lambda/credential-handler.zip
    
    - name: Deploy frontend to S3
      run: |
        aws s3 sync frontend/dist/ s3://employee-identity-frontend-staging/ --delete
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_STAGING }} --paths "/*"
    
    - name: Deploy smart contracts (if changed)
      run: |
        cd contracts
        if git diff --name-only HEAD~1 | grep -q "contracts/"; then
          npm run deploy:mumbai
        else
          echo "No contract changes detected, skipping deployment"
        fi
      env:
        POLYGON_RPC_URL: ${{ secrets.POLYGON_RPC_URL }}
        POLYGON_PRIVATE_KEY: ${{ secrets.POLYGON_PRIVATE_KEY }}
    
    - name: Run integration tests
      run: |
        npm run test:integration
      env:
        API_BASE_URL: https://api-staging.employee-identity.example.com
        TEST_EMPLOYEE_ID: test-employee-001

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://employee-identity.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Build applications
      run: npm run build
      env:
        NODE_ENV: production
    
    - name: Deploy infrastructure
      run: |
        aws cloudformation deploy \
          --template-file infrastructure/production.yaml \
          --stack-name employee-identity-production \
          --parameter-overrides \
            Environment=production \
            PolygonRpcUrl=${{ secrets.POLYGON_RPC_URL_PROD }} \
            PolygonPrivateKey=${{ secrets.POLYGON_PRIVATE_KEY_PROD }} \
            VeramoKmsSecret=${{ secrets.VERAMO_KMS_SECRET_PROD }} \
          --capabilities CAPABILITY_IAM \
          --no-fail-on-empty-changeset
    
    - name: Package Lambda functions
      run: |
        cd backend/lambda
        zip -r did-handler.zip didHandler.js node_modules/
        zip -r credential-handler.zip credentialHandler.js node_modules/
    
    - name: Update Lambda functions
      run: |
        aws lambda update-function-code \
          --function-name employee-identity-did-handler-production \
          --zip-file fileb://backend/lambda/did-handler.zip
        
        aws lambda update-function-code \
          --function-name employee-identity-credential-handler-production \
          --zip-file fileb://backend/lambda/credential-handler.zip
    
    - name: Deploy frontend to S3
      run: |
        aws s3 sync frontend/dist/ s3://employee-identity-frontend-production/ --delete
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PROD }} --paths "/*"
    
    - name: Deploy smart contracts to Polygon Mainnet
      run: |
        cd contracts
        if git diff --name-only HEAD~1 | grep -q "contracts/"; then
          npm run deploy:polygon
        else
          echo "No contract changes detected, skipping deployment"
        fi
      env:
        POLYGON_MAINNET_RPC_URL: ${{ secrets.POLYGON_MAINNET_RPC_URL }}
        POLYGON_PRIVATE_KEY: ${{ secrets.POLYGON_PRIVATE_KEY_PROD }}
    
    - name: Run smoke tests
      run: |
        npm run test:smoke
      env:
        API_BASE_URL: https://api.employee-identity.example.com
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Clean up artifacts
      run: |
        echo "Cleaning up temporary files and artifacts"
        # Add cleanup commands here if needed
